package kang.classfiter;

import android.content.Context;
import android.graphics.Color;
import android.os.Handler;
import android.os.Message;
import android.view.View;
import android.widget.TextView;
import android.widget.Toast;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import lecho.lib.hellocharts.gesture.ContainerScrollType;
import lecho.lib.hellocharts.gesture.ZoomType;
import lecho.lib.hellocharts.model.Axis;
import lecho.lib.hellocharts.model.AxisValue;
import lecho.lib.hellocharts.model.Line;
import lecho.lib.hellocharts.model.LineChartData;
import lecho.lib.hellocharts.model.PointValue;
import lecho.lib.hellocharts.view.LineChartView;


/**
 * Created by kang on 2017/9/25.
 */

public class Helper extends Handler implements Serializable {
    private Context context;

    private List mPointvalue = new ArrayList();
    private List mXvalue = new ArrayList();
    private List mYvalue = new ArrayList();
    private LineChartView chartView;
    private TextView resultview;
    private TextView msgView;
    private int interval = 30;
    private long starttime = 0;
    private int page = 1;
    private StringBuffer str;
    private boolean ServiceState = false;
    private int laststate = 0;
    private float datalength = 0;
    private Axis yaxis;

    public Helper(Context context) {
        this.context = context;
        str = new StringBuffer();
        str.append("start---");
        for (float i = 0.00f; i < 21.00f; i += 2.00f)
            mYvalue.add(new AxisValue(i).setLabel(i + ""));

        yaxis = new Axis();
        yaxis.setTextColor(Color.BLACK);
        yaxis.setValues(mYvalue);
        yaxis.setTextSize(8);
        yaxis.setAutoGenerated(true);
    }

    public void setChartView(LineChartView view) {
        this.chartView = view;
    }

    public void setResultview(TextView view) {
        this.resultview = view;
    }

    ;

    private void intichar() {
        Line line = new Line(mPointvalue);
        line.setColor(Color.BLUE);
        line.setFilled(true);
        line.setHasLabelsOnlyForSelected(true);
        line.setHasPoints(false);
        List lines = new ArrayList();
        line.setHasLines(true);
        lines.add(line);
        LineChartData data = new LineChartData();
        data.setLines(lines);

        Axis axis = new Axis();
        axis.setTextColor(Color.BLACK);
        axis.setValues(mXvalue);
        axis.setAutoGenerated(true);


        data.setAxisXBottom(axis);
        data.setAxisYLeft(yaxis);
        chartView.setInteractive(true);
        chartView.setZoomType(ZoomType.HORIZONTAL);
        chartView.setMaxZoom(4.0f);
        chartView.setContainerScrollEnabled(true, ContainerScrollType.HORIZONTAL);
        chartView.setLineChartData(data);
        chartView.setVisibility(View.VISIBLE);

       /* Viewport v=new Viewport(chartView.getMaximumViewport());
        v.left=50;
        v.right=50;
        chartView.setCurrentViewport(v);*/

    }

    public void getAxisValue(Object obj) {

        datalength += 1f;


        mXvalue.add(new AxisValue(datalength).setLabel(datalength + ""));
        mPointvalue.add(new PointValue(datalength, (float) obj));
        if (datalength > 50) {
            mXvalue.remove(0);
            mPointvalue.remove(0);
        }

    }

    public void setStarttime(long time) {
        starttime = time;
    }

    public int getPage() {
        return this.page;
    }

    public void setMsgView(TextView view) {
        msgView = view;
    }

    @Override
    public void handleMessage(Message msg) {
        super.handleMessage(msg);
        switch (msg.what) {
            case 1:
                if (page == 1 || page == 2) {
                    resultview.setText("断论:  跑步 ");
                }
                if (laststate != 1) {
                    str.append("run---");
                    this.sendEmptyMessage(9);
                }
                laststate = 1;
                break;
            case 2:
                if (page == 1 || page == 2) {
                    resultview.setText("断论:  走路 ");
                }
                if (laststate != 2) {
                    str.append("walk---");
                    sendEmptyMessage(9);
                }

                laststate = 2;
                break;
            case 3:
                if (page == 1 || page == 2) {
                    resultview.setText("断论:  跳 ");
                }
                if (laststate != 3) {
                    str.append("jump---");
                    sendEmptyMessage(9);
                }
                laststate = 3;
                break;
            case 4:
                if (page == 1 || page == 2) {
                    resultview.setText("断论:  没多大动静 ");
                }
                if (laststate != 4) {
                    str.append("still---");
                    sendEmptyMessage(9);
                }
                laststate = 4;
                break;
            case 5:
                if (chartView == null && page != 2) break;

                getAxisValue(msg.obj);

                intichar();
                break;
            case 6:
                if (page != 2) break;

                break;
            case 7:
                float[] arr = (float[]) msg.obj;
                if (page != 1 || arr.length != 4) break;
                msgView.setText(" x: " + arr[0] + "\n y: " + arr[1] + "\n z: " + arr[2] + "\n gravity: " + arr[3] + "\n time: " + System.currentTimeMillis() + "\n");

                break;
            case 8:

                break;
            case 9:
                if (msgView == null || resultview == null) break;
                if (ServiceState && page == 3) {
                    msgView.setText("start time: " + starttime + "\n end time:\n");
                    resultview.setText(str.toString());
                } else if (page == 3) {
                    msgView.setText("start time: \n end time:\n");
                    resultview.setText("wait to start");
                }
                break;
            case 10:
                page = msg.arg1;
                Toast.makeText(context, page + "", Toast.LENGTH_SHORT).show();
                if (page == 3)
                    this.sendEmptyMessage(9);
                else if (page == 2) {
                    this.sendEmptyMessage(12);

                } else if (page == 1)
                    this.sendEmptyMessage(11);
                break;
            case 11:
                if (ServiceState && page == 1) {

                } else {
                    msgView.setText("x:\n  y:\n  z:\n  gravity:\n time:\n");
                    resultview.setText("断论: ");
                }
                break;
            case 12:
                if (ServiceState && page == 2) {
                    if (chartView != null)
                        if (mXvalue.size() < 2) {
                            getAxisValue(0.0f);

                        }
                    intichar();
                } else {
                    String s = "";
                    if (laststate == 0) s = "nothing";
                    else if (laststate == 1) s = "跑步";
                    else if (laststate == 2) s = "走路";
                    else if (laststate == 3) s = "跳";
                    ;
                    resultview.setText("断论: " + s);
                }
                break;
            case 13:
                ServiceState = true;
                break;
            case 14:
                ServiceState = false;
                str.append("end");
                if (page == 3) {
                    resultview.setText(str.toString());
                    msgView.setText("start time: " + starttime + "\n end time: " + System.currentTimeMillis() + "\n");
                }

                break;
            case 0:

                if (resultview == null) break;
                if (page == 1 || page == 2)
                    resultview.setText("断论: nothing");

                if (laststate != 0) str.append("nothing---");
                laststate = 0;
                if (page == 3) resultview.setText(str.toString());
                break;
            case -1:
                break;
        }
    }
}
